{"version":3,"sources":["components/Manipulate.js","components/ManList.js","App.js","reportWebVitals.js","index.js"],"names":["ManipulateTime","styled","div","Button","button","reDec","Manipulate","label","decrement","length","increment","text","breakTime","sessionTime","handleDecrement","handleIncrement","handleClick","event","test","target","id","className","onClick","ManList","manipulateTime","map","e","i","sound","TimerContainer","App","useState","tLabel","setTlabel","setSessionTime","setBreakTime","isRunning","setIsRunning","timerId","setTimerId","currentTime","setCurrentTime","time","setTime","paused","setPaused","manipulatedSesh","setManipulatedSesh","manipulatedBreak","setManipulatedBreak","resetFlag","setResetFlag","initRender","useRef","useEffect","current","timesUp","startTimer","duration","minutes","seconds","activeTimer","setInterval","Math","floor","playSound","clearInterval","volume","play","catch","err","console","log","parseInt","pause","ref","element","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36601762.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ManipulateTime = styled.div`\n    margin: 0.75rem;\n    padding: 0.5rem;\n    border: solid 1px black;\n    border-radius: 0.25rem;\n    background-color: #333;\n    color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 8rem;\n`\n\nconst Button = styled.button`\n    margin: 0.25rem;\n    padding: 0.2rem;\n    width: 3.5rem;\n    border: solid 1px grey;\n    border-radius: 0.25rem;\n    cursor:pointer;\n    background-color: white;\n\n    &:hover {\n        background-color: #e1e1e1;\n    }\n`\n\n// let reInc = /increment/i;\nlet reDec = /decrement/i;\n\nconst Manipulate = (\n    { \n        label, \n        decrement, \n        length, \n        increment, \n        text,\n        breakTime,\n        sessionTime,\n        handleDecrement,\n        handleIncrement\n    }) => {\n    \n    // Updates the timer lengths correctly using element id\n    const handleClick = (event) => {\n        if (reDec.test(event.target.id)) {\n            handleDecrement(label);\n        } else {\n            handleIncrement(label);\n        }        \n    }\n\n    return (\n        <ManipulateTime className=\"manipulate-time\">\n            <div id={label}>{text}</div>\n            <Button id={decrement} onClick={handleClick}>-</Button>\n            <div id={length}>{label === 'break-label' ? breakTime : sessionTime}</div>\n            <Button id={increment} onClick={handleClick}>+</Button>\n        </ManipulateTime>\n    );\n}\n\nexport default Manipulate;","import Manipulate from './Manipulate';\n\n// Creates each timer-length handler and passes the necessary props\nconst ManList = (\n    { \n        manipulateTime,\n        breakTime,\n        sessionTime,\n        handleDecrement,\n        handleIncrement\n    }) => {\n\n    return (\n        manipulateTime.map((e, i) => {\n            return (\n                <Manipulate \n                    key={i}\n                    label={manipulateTime[i].label}\n                    decrement={manipulateTime[i].decrement}\n                    length={manipulateTime[i].length}\n                    increment={manipulateTime[i].increment}\n                    text={manipulateTime[i].text}\n                    breakTime={breakTime}\n                    sessionTime={sessionTime}\n                    handleDecrement={handleDecrement}\n                    handleIncrement={handleIncrement}\n                />\n            );\n        })\n    );\n}\n\nexport default ManList","/* \n  Code adapted from: https://medium.com/@marjuhirsh/a-beginners-account-of-building-a-pomodoro-clock-in-react-2d03f856b28a\n*/\n\nimport { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport ReactFCCtest from 'react-fcctest';\nimport ManList from './components/ManList';\nimport styled from 'styled-components';\n\nconst TimerContainer = styled.div`\n  margin: 0.75rem;\n  padding: 0.5rem;\n  width: 8rem;\n  background-color: salmon;\n  color: white;\n  border: solid 1px black;\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Button = styled.button`\n  margin: 0.25rem;\n  padding: 0.2rem;\n  width: 5rem;\n  border: solid 1px grey;\n  border-radius: 0.25rem;\n  cursor:pointer;\n  background-color: white;\n\n  &:hover {\n      background-color: #e1e1e1;\n  }\n`\n\n\nconst manipulateTime = [\n  {\n    label: 'break-label',\n    decrement: 'break-decrement',\n    length: 'break-length',\n    increment: 'break-increment',\n    text: 'Break Length'\n  },\n  {\n    label: 'session-label',\n    decrement: 'session-decrement',\n    length: 'session-length',\n    increment: 'session-increment',\n    text: 'Session Length'\n  }\n];\n\nlet sound;\n\nconst App = () => {\n  const [tLabel, setTlabel] = useState('Session');\n  // const [cycle, setCycle] = useState('Session');\n  const [sessionTime, setSessionTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5);\n  const [isRunning, setIsRunning] = useState(false);\n  const [timerId, setTimerId] = useState(0);\n  const [currentTime, setCurrentTime] = useState('25:00');\n  const [time, setTime] = useState(1500);\n  const [paused, setPaused] = useState(false);\n  const [manipulatedSesh, setManipulatedSesh] = useState(false);\n  const [manipulatedBreak, setManipulatedBreak] = useState(false);\n  const [resetFlag, setResetFlag] = useState(false);\n  const initRender = useRef(true);\n\n  // Decrements the session or break length\n  const handleDecrement = (label) => {\n    if (!isRunning) {\n      if (label === 'break-label') {\n        if (breakTime !== 1) {\n          setBreakTime(parseInt(breakTime) - 1);\n        }\n      } else {\n        if (sessionTime !== 1) {\n          setSessionTime(parseInt(sessionTime) - 1);\n        }\n      }\n    }\n  }\n\n  // Increments the session or break length\n  const handleIncrement = (label) => { \n    if (!isRunning) {\n      if (label === 'break-label') {\n        if (breakTime !== 60) {\n          setBreakTime(parseInt(breakTime) + 1);\n        }\n      } else {\n        if (sessionTime !== 60 ) {\n          setSessionTime(parseInt(sessionTime) + 1);\n        }\n      }\n    }\n  }\n\n  // Updates timer when session length is manipulated\n  useEffect(() => {\n    if (tLabel === 'Session') {\n      if (sessionTime < 10) {\n        setCurrentTime(`0${sessionTime}:00`);\n      } else {\n        setCurrentTime(`${sessionTime}:00`);\n      }\n    }\n    setManipulatedSesh(true);\n  }, [sessionTime]);\n\n  useEffect(() => {\n    if (tLabel === 'Break') {\n      if (breakTime < 10) {\n        setCurrentTime(`0${breakTime}:00`);\n      } else { \n        setCurrentTime(`${breakTime}:00`);\n      }\n    }\n    setManipulatedBreak(true);\n  }, [breakTime]);\n\n  useEffect(() => {\n    if (initRender.current) {\n      initRender.current = false;\n      return;\n    }\n\n    if (!resetFlag) {\n      tLabel === 'Break'\n      ? timesUp(breakTime, 'Break')\n      : timesUp(sessionTime, 'Session');\n    } else if (tLabel === 'Break') {\n      timesUp(breakTime, 'Break');\n    }\n    setResetFlag(false);\n  }, [tLabel]);\n\n  const handleTimer = () => {\n    if (isRunning) {\n      setIsRunning(false);\n      setPaused(true);\n      clearInterval(timerId);\n    } else {\n      // Depending on the label, whether the timer has been paused, or\n      // if the lengths have been manipulated it will start the timer with\n      // the appropriate length\n\n      if (tLabel === 'Break') {\n        if (!paused || manipulatedBreak) {\n          startTimer(breakTime * 60);\n        } else {\n          startTimer(time);\n        }\n      } else {\n        if (!paused || manipulatedSesh) {\n          startTimer(sessionTime * 60);\n        } else {\n          startTimer(time);\n        }\n      }\n    }\n  }\n\n  const reset = () => {\n    clearInterval(timerId);\n    setCurrentTime('25:00');\n    setIsRunning(false);\n    setPaused(false);\n    setManipulatedSesh(false);\n    setManipulatedBreak(false);\n    setBreakTime(5);\n    setSessionTime(25);\n    setTlabel('Session');\n    sound.pause();\n    sound.currentTime = 0;\n    setResetFlag(true);\n  }\n\n  const startTimer = (duration) => {\n    setIsRunning(true);\n    setPaused(false);\n    setManipulatedBreak(false);\n    setManipulatedSesh(false);\n    let minutes;\n    let seconds;\n    let activeTimer = setInterval(() => {\n      setTimerId(activeTimer);\n      duration--;\n      setTime(duration);\n      minutes = Math.floor(duration / 60);\n      seconds = duration - minutes * 60;\n      // Maintains mm:ss format for timer\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n      seconds = seconds < 10 ? '0' + seconds : seconds;\n      setCurrentTime(`${minutes}:${seconds}`);\n      // Switches cycle when time is up\n      if (duration === 0) {\n        playSound();\n        if (tLabel === 'Session') {\n          clearInterval(activeTimer);\n          setTlabel('Break');\n          return;\n        } else {\n          clearInterval(activeTimer);\n          setTlabel('Session');\n          return;\n        }\n      }\n    }, 1000);\n  }\n\n  // Functions to run when time runs out\n  const timesUp = (time) => {\n    setIsRunning(false);\n    clearInterval(timerId);\n    startTimer((time * 60) + 1);\n  }\n\n  const playSound = () => {\n    sound.currentTime = 0;\n    sound.volume = 0.5;\n    sound.play().catch(err => console.log(err));\n  }\n\n  return (\n    <div className='App'>\n      <ReactFCCtest />\n      <ManList \n        manipulateTime={manipulateTime} \n        handleDecrement={handleDecrement}\n        handleIncrement={handleIncrement}\n        sessionTime={sessionTime}\n        breakTime={breakTime}\n      /> \n      <TimerContainer className=\"timer\">\n          <div id=\"timer-label\">{tLabel}</div>\n          <Button id=\"start_stop\" onClick={handleTimer}>start/stop</Button>\n          <div id=\"time-left\">{currentTime}</div>\n          <Button id=\"reset\" onClick={reset}>reset</Button>\n      </TimerContainer>\n      <audio \n        id='beep' \n        ref={(element) => {sound = element}}\n        src='https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav' \n      />\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}